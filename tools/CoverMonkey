#!/usr/local/bin/node
// -*- mode: javascript; -*-
//
// Copyright (c) 2011 The Mozilla Foundation.
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//
//     Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
// PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Contributor(s): David Flanagan (dflanagan@mozilla.com)
//                 Donovan Preston (dpreston@mozilla.com)

//
// TODO:
//
// The dead code analysis is saying that catch blocks are unreachable.
// I think they must be their own entry points.  Need to ask someone on #jsapi
//   I've filed a patch for spidermonkey that will make -D associate the
//   offset of the catch with each try.  If accepted, this problem will 
//   go away.  If not, I'll have to be more creative to figure out where
//   the catch block is.
// 
// I'm getting warnings about unreachable non-zero opcodes...
//   fixed: they were in a prolog before the main: entry point.  Now
//   I just start reachability analysis from pc 0 and ignore the entry point.
// 
// Implement a -l option to actually list the line numbers that need attention?
//
// Clean up the code: its gotten really messy.
// 
// Abandon the server option and port to spidermonkey so users don't need 
// to have two different js interpreters installed?
//


var assert = require("assert");
var fs = require("fs");
var path = require("path");
var console = require("console");
var http = require("http");
var util = require("util");

function usage() {
    console.log("usage: CoverMonkey [options] [<file>]");
    console.log("Reads js -D data from <file> or stdin if no file specified.");
    console.log("Options:");
    console.log("  -q       Quiet: display coverage % only");
    console.log("  -s       Server: run as an HTTP server to display data");
    console.log("           implies -q");
    console.log("  -p port  Port number for server (default: 8000)");
    console.log("  -t file  Display coverage stats for target js file");
    console.log("           default: all files; multiple -t args allowed");
    console.log("  -d dir   Output HTML coverage files to directory dir");
    process.exit(1);
}


// Loop through the command-line arguments collecting input files and options
var options = {
    filename: null,
    input: null,
    inputdir: null,
    quiet: false,     // quiet: only output coverage %
    targets: [],      // Which js files do we want stats on?
    server: false,    // Start web server for exploring coverage
    port: 8000,
    outputdir: null
};


process.argv.shift();  // throw away the path to node
process.argv.shift();  // throw away the path to this script

while(process.argv.length) {
    var arg = process.argv.shift();
    switch(arg) {
    case '-q':
        options.quiet = true;
        break;
    case '-s':
        options.server = true;
        break;
    case '-p':
        if (!process.argv.length) usage();
        options.port = parseInt(process.argv.shift());
        if (options.port === 0) usage();
        break;
    case '-t':
        if (!process.argv.length) usage();
        options.targets.push(path.resolve(process.argv.shift()));
        break;
    case '-d':
        if (!process.argv.length) usage();
        if (options.outputdir) usage(); // only specify one
        options.outputdir = path.resolve(process.argv.shift());
        break;
    default: 
        if (options.filename) usage(); // One file only
        options.filename = arg;
        options.input = fs.createReadStream(options.filename,
                                            { encoding: "utf8"});
        options.inputdir = path.dirname(options.filename);
        break;
    }
}

// If no input file was specified, then read text from standard in
if (!options.input) {
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
    options.input = process.stdin;
    options.inputdir = process.cwd();
}

parseScripts(options.input, reportCoverage);


const SCRIPT_START = /^--- SCRIPT ([^:]+):(\d+) ---$/;
const SCRIPT_END = /^--- END SCRIPT/;
const SCRIPT_DATA = /^(\d+):(\d+)\/(\d+)\/(\d+)\s+x\s+(\d+)\s+(.*)$/;


// Read a stream of -D data and parse it. Interpret filenames relative to
// the specified directory.  If stream is stdin then any lines before the
// beginning of the -D data are printed to stdout.
function parseScripts(stream, callback) {
    var fragment = "";  // line fragments we haven't processed yet
    var scripts = [];   // Array of Script objects that hold the data
    var scriptMap = {}; // String->Script map for detecting duplicate scripts

    stream.on('data', function(chunk) {
        // Add any pending fragment to this chunk and break into lines
        var lines = (fragment + chunk).split("\n");
        
        // The last element of the array is an unterminated line
        fragment = lines.pop();
        
        // Now process the complete lines we got
        lines.forEach(processLine);
    });

    stream.on('end', function() {
        if (fragment != "") processLine(fragment);

        if (scripts.length === 0) {
            console.log("CoverMonkey: No coverage data to process.\n" +
                        "CoverMonkey: Are you using a debug build of spidermonkey?");
            process.exit(0);
        }

        callback(scripts);
    });

    var inscript = false; // Are we collecting a script or just echoing lines?
    var scriptlines;

    function processLine(dataline) {
        if (inscript) {
            scriptlines.push(dataline);
            if (dataline.match(SCRIPT_END)) {
                // Skip initial dummy script
                if (scriptlines[0] !== "--- SCRIPT (null):0 ---") {
                    var script = new Script(scriptlines);
                    var string = script.toString();

                    var existingScript = scriptMap[string];
                    if (existingScript) {
                        // We've seen this script before
                        existingScript.addCounts(script);
                    }
                    else {
                        scripts.push(script);
                        scriptMap[string] = script;
                        script.checkReachability();
                    }
                }
                
                scriptlines = null;
                inscript = false;
            }
        }
        else {
            if (dataline.match(SCRIPT_START)) {
                inscript = true;
                scriptlines = [ dataline ];
            }
            else if (stream === process.stdin) {
                console.log(dataline);
            }
        }
    }        
}

/*
 * Parse an array of lines to create a Script object.
 * "Script" is used in the SpiderMonkey internals sense: it is the body
 * of a JS function or the JS toplevel code, or an eval string.
 * 
 * Scripts have a name which is a (hopefully) unique id that includes the
 * source filename and starting line number. That isn't enough to be unique
 * because in "function a() { function b() {}}" both scripts have the same
 * file and line number. So I also have to include the ending line number
 * and/or ending opcode in the script name.  I could also include some kind
 * of hashcode of the script's opcodes in the name.  Or just use the
 * entire script disassembly as the name, I suppose.
 * 
 * XXX: Am I ever going
 * to be able to disambiguate functions a and b in the following, though?
 *   function() { function a(){} function b(){} }
 * 
 * Scripts also have a filename property that gives their filename
 * 
 * In addition to their name, scripts also have an array of opcodes and
 * a map of pc addresses to opcode indexes.
 *
 * Finally, each script has an entry point: the index of the starting opcode.
 * 
 * Each opcode includes its string of assembly code.  
 * And, after the script is analyzed, each opcode will also have a
 * reachable flag to indicate if it can ever actually be executed.
 */
function Script(lines) {
    var script = this;
    script.opcodes = [];
    script.pcToOpcodeIndex = {};

    lines.forEach(function(dataline) {
        var match;

        if (match = dataline.match(SCRIPT_START)) {
            script.filename = match[1]; 
            script.startline = parseInt(match[2], 10);

            // Script name is supposed to be a unique identifier for
            // the script, but it may need to include the opcodes to 
            // be maximally unique.
            script.name = match[1] + ":" + match[2];
        }
        else if (dataline.match(SCRIPT_END)) {
            return;
        }
        else if (dataline === "main:") {
            script.entrypoint = script.opcodes.length;
        }
        else if (match = dataline.match(SCRIPT_DATA)) {
            var opcode = {
                pc: parseInt(match[1], 10),
                count: parseInt(match[2], 10) +
                    parseInt(match[3], 10) +
                    parseInt(match[4], 10),
                srcline: parseInt(match[5], 10),
                assembly: match[6]
            };

            // Discard the (potentially very long) anonymous function 
            // souce associated with lambda opcodes
            if (opcode.assembly.match(/^lambda /))
                opcode.assembly = "lambda";
            if (opcode.assembly.match(/^deflocalfun /))
                opcode.assembly = "deflocalfun";

            script.pcToOpcodeIndex[opcode.pc] = script.opcodes.length;
            script.opcodes.push(opcode);
        }
        else if (dataline[0] === '\t') {
            // this is part of a switch (or other?) disassembly
            // for the previous opcode, so append it there
            script.opcodes[script.opcodes.length-1].assembly += dataline;
        }
        else {
            // Just ignore lines that we don't recognize.
            // We have to do this because some opcodes like lambda and
            // deflocalfun print out long function bodies on multiple lines
            return;
        }
    });
}

// Return a verbose representation of a script.  Distinct scripts will
// always return distinct strings.
Script.prototype.toString = function() {
    var s = this.name + ":" + this.entrypoint + "\n";
    var ops = this.opcodes.map(function(opcode) {
        return opcode.pc + ":" + opcode.srcline + ":"+ opcode.assembly;
    });
    return s + ops.join("\n");
}


// Add the opcode counts from that script to the opcodes in this script.
// This method requires that this.equals(that)
Script.prototype.addCounts = function(that) {
    for(var i = 0; i < this.opcodes.length; i++)
        this.opcodes[i].count += that.opcodes[i].count;
};

Script.prototype.checkReachability = function() {
    var switches = {
        "tableswitch":true,
        "lookupswitch":true,
        "tableswitchx":true,
        "lookupswitchx":true,

    };

    var terminators = {
        "stop": true,
        "return": true,
        "throw": true,
        "retrval":true,
        // treat retsub as a terminator because I treated gosub as a conditional
        "retsub":true
    };


    var unconditionals = {
        "goto": true,
        "gotox":true,
        "default":true,
        "defaultx":true, 
        "filter": true // E4X opcode: we'll probably never see it
    };
    
    var conditionals = {
        "ifeq": true,
        "ifeqx": true,
        "ifne": true,
        "ifnex": true,
        "or":true,
        "orx":true,
        "and":true,
        "andx":true,
        // Treat gosub as a conditional because when it
        // returns the following opcode is reachable
        "gosub":true,
        "gosubx":true,
        "case":true,   
        "casex":true,  
        "ifcantcalltop":true,
        // E4X opcode: we'll probably never see it
        "endfilter": true,

        // I treat the try opcode as a conditional as well even though it isn't
        // With my patched spidermonkey, -D outputs try opcodes with the offset
        // of the corresponding catch block, if there is one.  If the try
        // is reachable, then the catch block is reachable, too, and treating
        // it like a conditional jump is an easy way to handle it.  Note, 
        // however, that some try opcodes (like try/finally) won't have an
        // offset.  So if the offset is missing for any conditional, I'll just
        // treat it as if it falls through.
        // 
        // XXX:
        // If I can't get my patch to the try disasembly accepted into the tree
        // then I'll have to analyze each script to match try opcodes to
        // the corresponding enterblock for the catch.  -D output doesn't 
        // give me access to the source notes, and a try/finally inside of a
        // a try/catch would probably break my heuristics, though I might
        // be able to figure it out by looking for gosubs.
        // 
        "try": true,
    };

    function reachable(script, opcodeIndex) {
        assert.ok(opcodeIndex < script.opcodes.length);

        var opcode = script.opcodes[opcodeIndex];

        // If this opcode is already marked as reachable, then
        // we've already been here and don't want to loop
        if (opcode.reachable) return;
        

        // Mark this opcode as reachable.
        opcode.reachable = true;

        // Now, based on the opcode, determine which other opcodes
        // are reachable from it.  For most opcodes this will just be the
        // next opcode.  For conditional branches, it will be the next opcode
        // plus the branch target.  For unconditional it will just be
        // the branch target.  For switches, there will be many. 
        // And for things like stop, return and throw, there will be no
        // reachable opcodes.  Just recurse for each reachable opcode.
        var op = opcode.assembly.match(/(\w+)/)[1];

        function branchIndex(assembly) {
            var match = assembly.match(/^\w+\s+(\d+)/);
            if (!match) return null;
            return script.pcToOpcodeIndex[match[1]];
        }
        
        if (op in terminators) {
            // This opcode makes the script exit, so nothing is 
            // reachable from here.
            return;
        }
        else if (op in unconditionals) {
            // The unconditional jump target is reachable
            reachable(script, branchIndex(opcode.assembly));
        }
        else if (op in conditionals) {
            // The next opcode and the jump target are both reachable
            reachable(script, opcodeIndex+1);
            // If there is a branch address, then that is reachable, too.
            // (I have to test this since I'm treating try opcodes as
            // branches, and they don't always have offsets)
            var branch = branchIndex(opcode.assembly)
            if (branch) reachable(script, branch);
        }
        else if (op in switches) {
            // Multiple opcodes are reachable
            // The -D output for switches includes relative jump offsets
            // not absolute ones like those used by jumps

            // Each case is on its own line, starting with the 2nd line
            // The default offset is on the first line after the string "ffset"
            var cases = opcode.assembly.split("\t");

            var offset = parseInt(cases[0].match(/ffset (\d+)/)[1], 10);
            var absolute = opcode.pc + offset;
            var index = script.pcToOpcodeIndex[absolute];
            reachable(script, index);

            for(var i = 1; i < cases.length; i++) {
                offset = parseInt(cases[i].match(/: (\d+)$/)[1], 10);
                absolute = opcode.pc + offset;
                index = script.pcToOpcodeIndex[absolute];
                reachable(script, index);
            }
        }
        else {
            // For any other opcode, just the next one is reachable
            reachable(script, opcodeIndex+1);

            // Mark these opcodes to indicate that they fall-through
            opcode.fallsthrough = true;
        }
    }

    // Mark the entry point of the script as reachable, and
    // from there recursively determine what else is reachable.
    // Note that this code treats 0 as the entry point, even when
    // this.entrypoint is something else.  Before this.entrypoint
    // we get things like defvar opcodes that just fall through to the
    // entrypoint.  If we start at this.entrypoint then sometime we'll
    // have opcodes marked unreachable that we don't want marked that way.
    reachable(this, 0);
};

// Analyze the array of Script objects and return an object that maps
// filenames to File objects.
function analyzeScripts(scripts) {
    var data = {};

    scripts.forEach(function(script) {
        var filename = path.resolve(options.inputdir, script.filename);
        if (!(filename in data)) {
            data[filename] = new File(filename);
        }
        var file = data[filename];

        script.opcodes.forEach(function(opcode) {
            file.line(opcode.srcline).addOpcode(script.name + ":" + opcode.pc,
                                                opcode);
        });
    });

    return data;
}


// Generate output
function reportCoverage(scripts) {

    var data = analyzeScripts(scripts);

    var indextitle = "CoverMonkey Code Coverage Report";
    var stylesheet = 
        ".line {white-space: pre; font-family: monospace; font-weight: bold; padding:1px;}" +
        ".full {background-color: #fff}" +     // white for full coverage
        ".none {background-color: #faa}" +     // red for no coverage
        ".some {background-color: #ffa}" +     // yellow for partial coverage
        ".dead {background-color: #fca}" +     // orange for dead code
        ".p0 {color:#000;}" +
        ".p1 {color:#200;}" +
        ".p2 {color:#400;}" +
        ".p3 {color:#600;}" +
        ".p4 {color:#800;}" +
        ".p5 {color:#a00;}" +
        ".p6 {color:#c00;}" +
        ".p7 {color:#e00;}" +
        ".p8 {color:#f00;}" +
        ".p9 {color:#f00;}" +
        "table {border-collapse:collapse;}" +
        "td, th {border:solid black 1px; padding:3px 5px 3px 5px;}" +
        "th {background-color:rgba(0,0,0,0.1)}" +
        ".num {float:left; font-weight:bold; text-align:right; margin-right:1%; width:4%; text-decoration:none; color:inherit;}" +
        ".type {float:right; font-weight:bold; font-size:smaller; text-align:left; margin-left:1%; width:9%; }" +
        '.ops { margin-left: 5%; padding-left: 10px; }' +
        '.hidden { display:none; }' +
        "";

    var index_file_prefix = 
        '<html><head><title>%s</title>\n' + 
        '<style type="text/css">%s</style>\n</head>\n' +
        '<body><h1>%s</h1>' + 
        '<table><tr>' +
        '<th>Source File<th>Executable Lines<th>Covered<th>Partial<th>Uncovered' +
        '</tr>\n';

    var index_file_suffix = '</table></body></html>';

    var index_file_row =
        '<tr><td>%s<td>%d<td>%d (%d%)<td>%d (%d%)<td>%d (%d%)</tr>\n';

    var coverage_file_prefix = 
        '<html><head><title>%s</title>' + 
        '<style type="text/css">%s</style></head>' +
        '<body><h1>%s</h1>' + 
        '';

    var coverage_file_script = 
        '<script>' +
        'document.addEventListener("click", clickHandler, true);' +
        'function clickHandler(e) {' +
        '    if (e.target.classList.contains("num")) return;' +
        '    for(var elt = e.target; elt; elt = elt.parentNode) {' +
        '        if (elt.classList.contains("line")) {' +
        '            elt = elt.getElementsByTagName("table")[0];' +
        ' console.log(elt.classList); ' +
        '            if (elt) elt.classList.toggle("hidden");' +
        ' console.log(elt.classList); ' +
        '            return;' +
        '        }' +
        '    }' +
        '}' +
        '</script>';

    var coverage_file_suffix = "</body></html>";

    // the closing div is output explicitly
    var coverage_line =
        '<div id="%d"class="%s"><a href="#%d" class="num">%d</a>' +
        '<span class="type">%s</span>%s\n';

    var assembly_file_prefix = 
        '<html><head><title>%s</title>' + 
        '<style type="text/css">%s</style></head>' +
        '<body><h1>%s</h1>' + 
        '';
    var assembly_file_suffix = "</body></html>";


    // If no targets specified, output all
    if (options.targets.length === 0) { 
        for(filename in data) {
            // -D outputs a "(null)" script for the toplevel
            if (path.basename(filename) === "(null)") continue;
            options.targets.push(filename);
        }
        options.targets.sort();         // Alphabetially
    }

    options.targets.forEach(function(target, index) {
        var file = data[target];

        // If file is null here look for a file name with the same basename
        // And alter the target in the array
        if (!file) {
            target = path.basename(target);

            for(var filename in data) {
                if (path.basename(filename) === target) {
                    target = filename;
                    file = data[filename];
                    options.targets[index] = target;
                    break;
                }
            }
            if (!file) {
                console.warn("Unknown target file %s", target);
                return; 
            }
        }

        var coverage = file.coverage();
        var covered = coverage[0];
        var partial = coverage[1];
        var uncovered = coverage[2];
        var dead = coverage[3];
        var total = covered + partial + uncovered + dead;

        if (options.quiet || covered === total) {
            console.log("%s: %s%", target, percent(covered/total));
        }
        else {
            console.log("%s: %s%\n\t" +
                        "significant lines: %d\n\t" +
                        "          covered: %d (%s%)\n\t" +
                        "partially covered: %d (%s%)\n\t" +
                        "        uncovered: %d (%s%)\n\t" +
                        "             dead: %d (%d%)",
                        target, percent(covered/total),  total,
                        covered, percent(covered/total),
                        partial, percent(partial/total),
                        uncovered, percent(uncovered/total),
                        dead, percent(dead/total));
        }
    });

    function percent(x) { return (x*100).toFixed(2); }

    if (options.outputdir) {
        var stream = fs.createWriteStream(path.join(options.outputdir,
                                                    "index.html"));
        writeIndexFile(options.targets, stream, true);
        
        options.targets.forEach(function(jsfile) {
            var outputname = jsfile.replace(/\//g, "_") + ".html";
            stream = fs.createWriteStream(path.join(options.outputdir,
                                                    outputname));
            writeCoverageFile(jsfile, stream, false, true);
        });
    }

    if (options.server) {
        var server = http.createServer(function(request, response) {
            if (request.url === "/" || request.url === "/index.html") {
                response.statusCode = 200;
                response.setHeader("Content-Type", "text/html");
                writeIndexFile(options.targets, response);
            }
            else if (data[request.url]) {
                // If it is the name of one of our targets
                response.statusCode = 200;
                response.setHeader("Content-Type", "text/html");
                writeCoverageFile(request.url, response);
            }
            else {
                response.statusCode = 404;
                response.setHeader("Content-Type", "text/html");
                response.end("Unknown file: " + request.url);
            }
        }).listen(options.port, "localhost", function() {
            console.log("Details available at http://localhost:%d",
                        options.port);
        });
    }

    // Write an HTML summary of the profiling/coverage data to the specified
    // stream and call the stream's end() method when done.
    // If staticfile is set then we're writing to a file and need to 
    // change the way we generate links
    function writeIndexFile(targets, stream, staticlink) {
        stream.write(util.format(index_file_prefix,
                                 indextitle, stylesheet, indextitle));

        targets.forEach(function(target) {
            var file = data[target];
            var coverage = file.coverage();
            var covered = coverage[0];
            var partial = coverage[1];
            var uncovered = coverage[2];
            var total = covered + partial + uncovered;
            
            stream.write(util.format(index_file_row,
                                     filelink(target,staticlink),
                                     total, 
                                     covered, percent(covered/total),
                                     partial, percent(partial/total),
                                     uncovered, percent(uncovered/total)));
            
        });

        if (targets.length == 1) {
            stream.write('</table><h1>' + targets[0] + '</h1>');
            writeCoverageFile(targets[0], stream, true);
        }
        else 
            stream.end(index_file_suffix);
    }

    // Write an HTML page that lists a js source file with color coding to
    // indicate coverage and profiling information.
    // Write to the specified stream and close the stream when done.
    function writeCoverageFile(target, stream, noprefix, staticlink) {
        var file = data[target];
        var lines = fs.readFileSync(target, "utf8").split("\n");
        var title = "CoverMonkey Report for " + target;

        if (!noprefix) {
            stream.write(util.format(coverage_file_prefix,
                                     title, stylesheet, title));
        }

        // The script make the line numbers clickable.
        // This only works when running as a server, so don't include
        // the script when generating static files.
        if (!staticlink)
            stream.write(util.format(coverage_file_script, target));

        lines.forEach(function(line, linenum) {
            linenum += 1; // line numbers are 1-based, not 0-based
            var linedata = file.lines[linenum];
            var cov = file.coverageClass(linenum);
            var c = "line" + cov + file.profileClass(linenum);
            if (line === "") line = " ";  // To make the HTML format right.
            if (cov) {
                if (cov === " full") {
                    var counts = linedata.counts();
                    cov = "// " + counts[counts.length-1];
                }
                else
                    cov = "//" + cov;
            }
            stream.write(util.format(coverage_line, linenum, c, linenum,
                                     linenum, cov, line));

            if (linedata) {
                stream.write('<table class="ops hidden">');
                stream.write('<tr><th>Function @<th>PC<th>#<th>Instruction</tr>');
                for(pc in linedata.opcodes) {
                    var opcode = linedata.opcodes[pc];
                    var idx = pc.lastIndexOf(":");
                    stream.write(util.format("<tr><td>%s<td>%s<td>%d<td>%s</tr>",
                                             pc.substring(0,idx),
                                             pc.substring(idx+1),
                                             opcode.count,
                                             opcode.assembly));
                }
                stream.write("</table>");
            }
            stream.write("</div>\n");  // close the line div
        });

        stream.end(coverage_file_suffix);
    }

    // Return an <a> tag with a URL that will generate a file listing
    function filelink(target, staticlink) {
        if (staticlink) {
            target = target.replace(/\//g, "_") + ".html";
            return '<a href="' + target + '">' + target + '</a>';
        }
        else
            return '<a href="' + target + '">' + target + '</a>';
    }
}

function Line(file, number) {
    this.file = file;
    this.number = number;
    this.opcodes = {};  // Map pc to Opcode object
}

Line.prototype.addOpcode = function(pc, opcode) {
    if (this.opcodes[pc]) {
        console.log("Ignoring duplicate opcode");
        return;
    }
    this.opcodes[pc] = opcode;
};

// Return an array of the counts for this line.  If all opcodes have
// the same count, then this will be a single element array.  If the line
// includes a branch then there may be two or three branches.  The counts will
// be sorted from fewest to most.
// If all opcodes are unreachable, then the returned array will be empty
// indicating that the line is dead code.
// Unreachable opcodes have a count of -1
Line.prototype.counts = function() {
    if (!this._counts) {
        var min = Infinity, max = 0;
        var rawcounts = [];
        var lastopcode;

        for(var pc in this.opcodes) {
            var opcode = this.opcodes[pc];
            var c = opcode.count;
            if (opcode.reachable) {

                // If the last opcode continues unconditionally on to this one
                // then skip this opcode if the count is the same (it might
                // be different if this one is also a jump target).
                // And also skip this opcode if it has a zero count and
                // the last one did not: that is just the sign of an
                // interpreter optimization that messes up the counts
                if (lastopcode && lastopcode.fallsthrough) {
                    if (c === lastopcode.count) continue;
                    if (c === 0 && lastopcode.count !== 0) continue;
                }

                min = Math.min(min, c);
                max = Math.max(max, c);
                rawcounts.push(c);
            }
            else {  // Unreachable opcode
                if (c !== 0) {
                    console.log("WARNING: unreachable opcode with non-0 count");
                    console.log(pc, opcode.count, opcode.assembly);
                }
                
                rawcounts.push(-1);
            }

            lastopcode = opcode;
        }

        var counts;

        
        if (min === max && min >=0) {      // Special case: all lines are same
            counts = [min];  
        }
        else if (rawcounts.length === 1 && rawcounts[0] === -1) {
            // A single unreachable opcode.  If it is a stop opcode, then
            // this isn't really a dead line and should be treated as an
            // insignificant line instead.
            if (this.opcodes[Object.keys(this.opcodes)[0]].assembly === "stop")
                counts = [];
        }
        else {
            rawcounts.sort(function(a,b) { return a-b; });  // Numerical order
            
            // Remove duplicates so only the unique counts are listed here
            var counts = [];
            counts[0] = rawcounts[0];
            for(var i = 1, j = 0; i < rawcounts.length; i++) {
                if (rawcounts[i] === counts[j]) continue;
                counts[++j] = rawcounts[i];
            }
        }            
        this._counts = counts;
    }

    return this._counts;
}

// Return coverage for this line.
// One of the strings "full", "some", "none", "dead" or ""
Line.prototype.coverage = function() {
    var counts = this.counts();
    // We return "" if the code should be treated as insignificant code
    // like comments and whitespace.  This happens when there is a single
    // unreachable stop opcode
    if (counts.length === 0) return "";

    if (counts[0] > 0) return "full";
    if (counts.length === 1) {
        if (counts[0] === 0) return "none";
        if (counts[0] === -1) return "dead";
    }
    return "some";
}

function File(name) {
    this.name = name;
    this.lines = {};
}

File.prototype.line = function(linenum) {
    if (!this.lines[linenum]) {
        this.lines[linenum] = new Line(this, linenum);
    }
    return this.lines[linenum];
};

File.prototype.coverage = function() {
    var covered = 0, partial = 0, uncovered = 0, dead = 0;

    for(var linenum in this.lines) {
        var line = this.lines[linenum];
        switch(line.coverage()) {
        case "full": covered++; break;
        case "some": partial++; break;
        case "none": uncovered++; break;
        case "dead": dead++; break;
        case "": // do nothing in this case
        }
    }

    return [covered, partial, uncovered, dead];
}

// Return the coverage class for line n of the specified file.
// Lines that don't have executable code will return an empty string.
File.prototype.coverageClass = function(n) {
    if (n in this.lines) 
        return " " + this.lines[n].coverage();
    return "";
}

// Return the profile class for line n.  This will be based on the 
// base-10 logarithm of the number of executions
File.prototype.profileClass = function(n) {
    if (!(n in this.lines)) return "";
    var counts = this.lines[n].counts();
    var count = counts[counts.length-1];  // the last one is biggest
    return " p" + log(count);

    function log(x) {
        if (x <= 0) return 0;
        return Math.min(Math.floor(Math.log(x)/Math.LN10), 9);
    }
}
