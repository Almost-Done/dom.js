#!/usr/local/bin/node

var spawn = require('child_process').spawn;
var fs = require('fs');

const JS_FILE_RE = /.*\.js$/;
const START_PC_COUNTS = /\n--- SCRIPT ([^:]+):(\d+) ---\n/;

var all_disassemblies = '';

function runCoverMonkey() {
    var covermonkey = spawn('tools/CoverMonkey', ['-d', 'html']);
    covermonkey.stdin.write(all_disassemblies);
    covermonkey.stdin.end()
    covermonkey.stdout.on('data', function(data) { console.log(data.toString()); });
    covermonkey.stderr.on('data', function(data) { console.log(data.toString()); } );
    covermonkey.on('exit', function(code) {
        console.log("CoverMonkey exited. (%d)", code);
    });
}

function runNextTest(files) {
    if (!files.length) {
        return runCoverMonkey();
    }

    fileName = files.pop();
    if (fileName.match(JS_FILE_RE)) {
        var stdout = '';
        var stderr = '';
        var pc_counts = false;
        var process = spawn('js', [
            '-D',
            '-f', 'src/testutils.js',
            '-f', 'dom.js',
            '-f', 'tests/newtests/' + fileName]);
        process.stdout.on('data', function (data) {
            stdout += data.toString();
        });

        process.stderr.on('data', function (data) {
            stderr += data;
        });

        process.on('exit', function (code) {
            all_disassemblies += stdout;
            if (code) {
                console.log('OUT:', fileName);
                console.log(stdout);
                console.log('ERR:', fileName);
                console.log(stderr);
                console.log("\x1b[31m\x1b[1m[FAIL]\x1b[0m", fileName);
            } else {
                console.log("\x1b[32m\x1b[1m[PASS]\x1b[0m", fileName);
            }

            runNextTest(files);
        });
    }
}

fs.readdir('tests/newtests', function(err, files) {
    runNextTest(files);
});
