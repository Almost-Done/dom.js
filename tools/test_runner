#!/usr/bin/env node

var spawn = require('child_process').spawn;
var fs = require('fs');

const JS_FILE_RE = /.*\.js$/;
const MAX_PROCESSES = 2;

function runNextTest(files, processes) {
    if (!files.length) {
        if (processes.num === 0) {
            processes.cover.stdin.end();
        }
        return;
    }

    if (processes.num === MAX_PROCESSES) return;

    var fileName = files.pop();

    if (!fileName.match(JS_FILE_RE)) return runNextTest(files, processes);

    processes.num++;

    var stdout = '';
    var stderr = '';
    var process = spawn('js', [
        '-D',
        '-f', 'src/testutils.js',
        '-f', 'dom.js',
        '-e', 'try { run("tests/newtests/' + fileName + '") } catch (e) { print(e.stack); throw e; }']);
    process.stdout.on('data', function (data) {
        stdout += data;
    });

    process.stderr.on('data', function (data) {
        stderr += data;
    });

    process.on('exit', function (code) {
        processes.cover.stdin.write(stdout);
        if (code) {
            console.log('OUT:', fileName);
            stdout = stdout.replace(/^--- SCRIPT ([^:]+):(\d+) ---$[^]*/m, "")
            console.log(stdout);
            console.log('ERR:', fileName);
            console.log(stderr);
            console.log("\x1b[31m\x1b[1m[FAIL]\x1b[0m", fileName);
        } else {
            console.log("\x1b[32m\x1b[1m[PASS]\x1b[0m", fileName);
        }
        processes.num--;
        runNextTest(files, processes);
    });

    runNextTest(files, processes);
}

fs.readdir('tests/newtests', function(err, files) {
    var covermonkey = spawn('deps/CoverMonkey/CoverMonkey',
                            ['-h', 'coverage.html', '--atlines', '--noecho', '-c']);
    covermonkey.stdout.on('data', function(data) { process.stdout.write(data.toString()); });
    covermonkey.stderr.on('data', function(data) { process.stdout.write(data.toString()); } );
    covermonkey.on('exit', function(code) {
        console.log("CoverMonkey exited. (%d)", code);
    });

    runNextTest(files, {num: 0, cover: covermonkey});
});
