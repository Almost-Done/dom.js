// Utility functions and other globals used throughout dom.js

// Take a snapshot of all API functions we might call. Some of the code
// below might run after initialization, at which point user code might
// have redirected them.
var Object_prototype = Object.prototype;
var defineProperty = Object.defineProperty;
var freeze = Object.freeze;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var keys = Object.keys;

function PropertyDescriptor() {}
PropertyDescriptor.prototype.readonly = function() {
    this.writable = false;
    return this;
}
PropertyDescriptor.prototype.hidden = function() {
    this.enumerable = false;
    return this;
}
PropertyDescriptor.prototype.fixed = function() {
    this.configurable = false;
    return this;
}
function DataProp(v) {
    var d = Object.create(PropertyDescriptor.prototype);
    d.value = v;
    d.writable = d.enumerable = d.configurable = true;
    return d; 
}
function AccessorProp(get, set) {
    var d = Object.create(PropertyDescriptor.prototype);
    d.get = get;
    if (set) d.set = set;
    d.enumerable = d.configurable = true;
    return d; 
}

// Define a property p of the object o whose value is the return value of f().
// But don't invoke f() until the property is actually used for the first time.
// The property will be writeable, enumerable and configurable.
// If the property is made read-only before it is used, then it will throw
// an exception when used.
// Based on Andreas's AddResolveHook function.
function defineLazyProperty(o, p, f) {
    defineProperty(o, p,
                   AccessorProp(function() { // the property getter
                                   var value = f();
                                   defineProperty(o, p, { value: value });
                                   return value;
                                },
                                function(value) { // the property setter
                                    defineProperty(o, p, { value: value });
                                }));
}

function TurnUndefinedIntoNull(v) {
    if (typeof v == "undefined")
	return null;
    return v;
}

// Lookup the implementation object associated with an interface object.
function $$(map, obj) {
    if (typeof obj == "object" && obj && (obj = map.get(obj)))
	return obj;
    throw new DOMException(DOMException.NOT_FOUND_ERR);
}

function nyi() { throw "Not Yet Implemented"; }
